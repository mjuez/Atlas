/**
 * @author : gherardo varando (gherardo.varando@gmail.com)
 *
 * @license: GPL v3
 *     This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

'use strict';

const Util = require('Util');
const ToggleElement = require('ToggleElement');

class ListGroup extends ToggleElement {
    constructor(parent) {
        if (parent.appendChild) {
            let element = document.createElement('UL');
            element.className = 'list-group';
            element.id = `${parent.id}List`;
            super(element);
            this.id = `${parent.id}List`;
            this.items = {};
            //    this.toggleItems = {};
            this.nItems = 0;
            this.header = null;
            this.appendTo(parent);
        }
    }

    addItem(options) {
        let li = document.createElement('LI');
        let item = new ToggleElement(li);
        li.className = 'list-group-item';
        if (options.id === 'undefined' || options.id === undefined) {
            options.id = `${this.nItems}`;
        }
        options.id = options.id || `${this.nItems}`;
        options.key = options.key || '';
        li.id = `${this.id}Item${options.id}`;

        if (typeof options.image === 'string') {
            let img = document.createElement('IMG');
            img.className = 'media-object pull-left';
            img.src = options.image;
            img.height = "30";
            img.width = "30";
            li.appendChild(img);
        } else if (typeof options.icon === 'string') {
            let icon = Util.icon(`${options.icon} pull-left media-object`);
            li.appendChild(icon);
        } else {

        }



        let body = document.createElement('DIV');
        body.className = 'media-body';

        if (options.title) {
            if (typeof title === 'string') {
                let title = document.createElement('STRONG');
                title.innerHTML = options.title;
                body.appendChild(title);
                options.key = `${options.key} ${options.title}`;
            } else if (typeof options.title.appendChild === 'function') {
                body.appendChild(options.title);
            } else {
                options.key = `${options.key} ${options.title}`;
                let title = document.createElement('STRONG');
                title.innerHTML = options.title;
                body.appendChild(title);
            }
        }

        if (options.body) {
            if (options.body instanceof ToggleElement) {
                body.appendChild(options.body.element);
                item.body = options.body;
            } else if (typeof options.body === 'string') {
                let cont = document.createElement('P');
                title.innerHTML = options.body;
                body.appendChild(cont);
                item.body = new ToggleElement(cont);
            } else if (typeof options.body.appendChild === 'function') {
                body.appendChild(options.body);
                item.body = new ToggleElement(options.body);
            }


        }



        if (options.toggle) {
            li.role = 'button';
            li.onclick = (arg) => {
                let done = false;
                let b = document.getElementById(`${this.id}Item${options.id}`);
                if (b.className.includes('active')) {
                    b.className = `list-group-item`;
                    if (options.toggle.showJustOne) {
                        this.showAll();
                    }


                    if (typeof options.onclick.deactive === 'function') {
                        options.onclick.deactive();
                        done = true;
                    }
                } else {
                    if (options.toggle.showJustOne) {
                        this.showJust(options.id);
                    }

                    if (options.toggle.justOne) {
                        this.deactiveAll();
                    }

                    b.className = `list-group-item active`;
                    if (typeof options.onclick.active === 'function') {
                        options.onclick.active();
                        done = true;
                    }
                }
                if (!done) {
                    options.onclick();
                }

            };
            if (options.active) {
                li.className = `list-group-item active`;
            } else {
                li.className = `list-group-item`;
            }

        } else {
            li.role = 'button';
            li.onclick = options.onclick;
        }

        if (options.ondblclick) {
            li.role = 'button';
            li.ondblclick = options.ondblclick;
        }

        li.appendChild(body);

        item.key = options.key; //set the search key
        this.element.appendChild(li);
        this.items[options.id] = item;
        this.nItems++;
    }

    setKey(id, newkey, append) {
        if (id === undefined || id === null) {
            return;
        }
        if (this.items[id]) {
            if (append) {
                this.items[id].key = this.items[id].key + newkey;
            } else {
                this.items[id].key = newkey;
            }
        }
    }

    removeKey(id, key) {
        if (id === undefined || id === null) {
            return;
        }
        if (this.items[id]) {
            this.items[id].key = this.items[id].key.replace(key, '');
        }
    }


    setTitle(id, newtitle) {
        if (id === undefined || id === null) {
            return;
        }
        if (this.items[id]) {
            this.removeKey(id, this.items[id].element.getElementsByTagName('STRONG')[0].innerHTML);
            this.items[id].element.getElementsByTagName('STRONG')[0].innerHTML = newtitle;
            this.setKey(id, newtitle, true);
        }
    }


    showJust(id) {
        if (id === undefined || id === null) {
            return;
        }
        for (let it in this.items) {
            this.items[it].hide();
        }
        this.items[id].show();
    }

    showAll() {
        for (let it in this.items) {
            this.items[it].show();
        }
    }


    activeJustOne(id) {
        if (id === undefined || id === null) {
            return;
        }
        for (let it in this.items) {
            this.items[it].element.className = 'list-group-item';
        }
        this.items[id].element.className = 'list-group-item active';
    }

    activeOne(id) {
        this.items[id].element.className = 'list-group-item active';
    }

    deactiveAll() {
        for (let it in this.items) {
            this.items[it].element.className = 'list-group-item';
        }
    }


    applyAll(f) {
        for (let t in this.items) {
            f(this.items[t]);
        }
    }


    removeItem(id) {
        if (id === undefined || id === null) {
            return;
        }
        let item = this.items[id];
        if (item === undefined || item === null) {
            return;
        }
        if (item instanceof ToggleElement) {
            this.element.removeChild(item.element);
            delete this.items[id];
            delete this.items[id];
            this.nItems--;
        }
    }


    clean() {
        Object.keys(this.items).map((id) => {
            this.removeItem(id);
        });
    }

    addSearch(options) {
        options = options || {};
        let li = document.createElement('LI');
        li.className = 'list-group-header';
        let input = document.createElement('INPUT');
        input.className = 'form-control';
        input.type = 'search';
        input.placeholder = options.placeholder || 'Search';
        input.onsearch = () => {
            this.showAll();
            let val = input.value;
            for (let it in this.items) {
                if (this.items[it].key.toLowerCase().includes(val.toLowerCase()) || val === '') {
                    this.items[it].show();
                } else {
                    this.items[it].hide();
                }
            }
        };

        li.appendChild(input);
        this.element.insertBefore(li, this.element.firstChild);
        this.search = input;
    }

}

module.exports = ListGroup;
